<div class="flex flex-col max-h-screen mx-auto mt-6">

  <div class="mx-2 sm:mx-auto <%= unless @user_type == "", do: "hidden" %>">
    <div class="text-2xl text-center">I'm a...</div>
    <div class="flex flex-col mt-2">
      <div phx-click="select-user-type" phx-value-type="tenant" class="btn btn-emerald sm:w-64">Tenant</div>
      <div phx-click="select-user-type" phx-value-type="landlord" class="mt-4 btn btn-emerald sm:w-64">Landlord / Property Manager</div>
    </div>
    <button phx-click="back-to-main" class="flex items-center mx-auto mt-4 btn btn-white">
      <svg class="w-5 h-5" stroke="none" fill="currentColor" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" preserveAspectRatio="xMidYMid meet" data-attributes-set=",xmlns:xlink,xmlns,viewBox,preserveAspectRatio,xmlns:xlink,xmlns,viewBox,preserveAspectRatio"><path xmlns="http://www.w3.org/2000/svg" d="M0 0h24v24H0z" fill="none"></path><path xmlns="http://www.w3.org/2000/svg" d="M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z"></path></svg>
      <div class="ml-1">Back</div>
    </button>

  </div>

  <div class="w-full px-4 mx-auto text-gray-500 sm:w-128 <%= if @user_type == "", do: "hidden" %>">
    <div class="mt-2">
        <div class="">
          <div class="text-2xl text-bold">Address</div>
          <div class="mt-2">
            <div id="locationField" class="z-10">
              <input
                id="autocomplete"
                placeholder="Enter your address"
                onFocus="geolocate()"
                type="text"
                class="w-full input-field"
                phx-update="ignore"
              />
            </div>
          </div>

          <%= f = form_for @changeset, "#", [phx_submit: "save-property", phx_change: "update-property"] %>
          <div class="hidden">
            <div class="flex mt-2">
              <div class="w-1/2">
                <div class="text-xs">Street Number</div>
                <%=
                    text_input f, :street_number,
                    class: "input-field w-full",
                    placeholder: "123",
                    autocomplete: "off",
                    id: "street_number",
                    required: true
                %>
              </div>

              <div class="w-1/2 ml-2">
                <div class="text-xs">Street Address</div>
                <%=
                    text_input f, :street_address,
                    class: "input-field w-full",
                    placeholder: "Main Street",
                    autocomplete: "off",
                    id: "route"
                %>
              </div>
            </div>

            <div class="flex mt-2">
              <div class="w-1/2">
                <div class="text-xs">City</div>
                <%=
                    text_input f, :city,
                    class: "input-field w-full",
                    placeholder: "Vancouver",
                    autocomplete: "off",
                    id: "locality",
                    required: true
                %>
              </div>

              <div class="w-1/2 ml-2">
                <div class="text-xs">State / Province</div>
                <%=
                    text_input f, :state,
                    class: "input-field w-full",
                    placeholder: "British Columbia",
                    autocomplete: "off",
                    id: "administrative_area_level_1"
                %>
              </div>
            </div>

            <div class="flex mt-2">
              <div class="w-1/2">
                <div class="text-xs">Zip Code / Postal Code</div>
                <%=
                    text_input f, :zip,
                    class: "input-field w-full",
                    placeholder: "V6B 2J1",
                    autocomplete: "off",
                    id: "postal_code"
                %>
              </div>

              <div class="w-1/2 ml-2">
                <div class="text-xs">Country</div>
                <%=
                    text_input f, :country,
                    class: "input-field w-full",
                    placeholder: "Canada",
                    autocomplete: "off",
                    id: "country"
                %>
              </div>
            </div>
          </div>

        </div>

        <div class="mt-8">
          <div class="text-2xl text-bold">Property Information</div>

          <div class="mt-2">
            <%= select(f, :property_type, [{"Property Type", ""}, {"Apartment", "apartment"}, {"House", "house"}, {"Room Only", "room_only"}, {"Townhouse", "townhouse"}, {"Condo", "condo"}, {"Duplex", "duplex"}, {"Loft", "loft"}, {"Land", "Land"}, {"Flat", "flat"}, {"Cottage or Cabin", "cottage_or_cabin"}], class: "select-field w-full", required: true) %>
            <%= select(f, :sale_or_rent, [{"Rent or Sale", ""}, {"Rent", "rent"}, {"Sales", "sale"}], class: "select-field w-full mt-4", required: true) %>
          </div>

          <div class="<%= unless Map.get(@changeset.changes, :sale_or_rent, nil) == :rent, do: "hidden" %>">
            <div class="px-1 text-sm transform translate-x-2 translate-y-2.5 bg-white w-max">Monthly Rent</div>
            <% rent_required = if Map.get(@changeset.changes, :sale_or_rent, nil) == :rent do true else false end %>
            <%=
                text_input f, :monthly_rent,
                class: "input-field w-full",
                autocomplete: "off",
                required: rent_required,
                type: "number",
                inputmode: "numeric",
                pattern: "[0-9]*",
                min: "1"
            %>
            <%= error_tag f, :monthly_rent %>
          </div>

          <div class="">
            <div class="px-1 text-sm transform translate-x-2 translate-y-2.5 bg-white w-max">Square Footage</div>
            <%=
                text_input f, :square_footage,
                class: "input-field w-full",
                autocomplete: "off",
                required: true,
                type: "number",
                inputmode: "numeric",
                pattern: "[0-9]*",
                min: "1"
            %>
            <%= error_tag f, :square_footage %>
          </div>

          <div class="">
            <%= select(f, :bedrooms, Enum.map(0..20, fn x -> {"#{x} bedrooms", x} end) |> List.insert_at(0, {"Bedrooms", ""}), class: "select-field w-full mt-4", required: true) %>
            <%= select(f, :washrooms, Enum.map(0..20, fn x -> {"#{x} washrooms", x} end) |> List.insert_at(0, {"Washrooms", ""}), class: "select-field w-full mt-4", required: true) %>
          </div>
        </div>

        <%=
          text_input f, :user_type,
          class: "hidden",
          value: @user_type,
          autocomplete: "off",
          required: true
        %>

        <div class="mt-8">
          <div class="text-2xl text-bold">Amenities</div>
          <div class="">
            <%= select(f, :laundry_type, [{"Select Laundry", ""}, {"In-suite Laundry", "in_suite_laundry"}, {"Laundry in Building", "in_building_laundry"}, {"Laundry Available", "laundry_available"}, {"No Laundry", "none"}], class: "select-field w-full mt-2", required: true) %>
            <%= select(f, :parking, [{"Select Parking", ""}, {"Attached Garage Parking", "attached_garage_parking"}, {"Detached Garage Parking", "detached_garage_parking"}, {"Street Parking", "street_parking"}, {"Off Street Parking", "off_street_parking"}, {"Parking Available", "parking_available"}, {"No Parking", "none"}], class: "select-field w-full mt-4", required: true) %>
            <%= select(f, :air_conditioning_type, [{"Select Air Conditioning", ""}, {"Central A/C", "central_ac"}, {"A/C Available", "ac_available"}, {"No Air Conditioning", "none"}], class: "select-field w-full mt-4", required: true) %>
            <%= select(f, :heating_type, [{"Select Heating", ""}, {"Central Heating", "central_heating"}, {"Electric Heating", "electric_heating"}, {"Gas Heating", "gas_heating"}, {"Radiator Heating", "radiator_heating"}, {"Heating Available", "heating_available"}, {"No Heating", "none"}], class: "select-field w-full mt-4", required: true) %>
          </div>
          <div class="flex flex-col mt-4">
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :wifi, class: "checkbox") %>
              <span class="ml-2">Wifi</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :bathtub, class: "checkbox") %>
              <span class="ml-2">Bathtub</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :shower, class: "checkbox") %>
              <span class="ml-2">Shower</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :ethernet_connection, class: "checkbox") %>
              <span class="ml-2">Ethernet Connection</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :smoke_alarms, class: "checkbox") %>
              <span class="ml-2">Smoke Alarms</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :oven, class: "checkbox") %>
              <span class="ml-2">Oven</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :stove, class: "checkbox") %>
              <span class="ml-2">Stove</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :microwave, class: "checkbox") %>
              <span class="ml-2">Microwave</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :dish_washer, class: "checkbox") %>
              <span class="ml-2">Dishwasher</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :refrigerator, class: "checkbox") %>
              <span class="ml-2">Refrigerator</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :patio_or_balcony, class: "checkbox") %>
              <span class="ml-2">Patio or Balcony</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :backyard, class: "checkbox") %>
              <span class="ml-2">Backyard</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :furnished, class: "checkbox") %>
              <span class="ml-2">Furnished</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :smoking, class: "checkbox") %>
              <span class="ml-2">Smoking</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :ev_charging, class: "checkbox") %>
              <span class="ml-2">EV Charging</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :dogs_ok, class: "checkbox") %>
              <span class="ml-2">Dogs Allowed</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :cats_ok, class: "checkbox") %>
              <span class="ml-2">Cats Allowed</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :wheelchair_accessible, class: "checkbox") %>
              <span class="ml-2">Wheelchair Accessible</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :gym, class: "checkbox") %>
              <span class="ml-2">Gym</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <%= checkbox(f, :pool, class: "checkbox") %>
              <span class="ml-2">Pool</span>
            </label>
          </div>
        </div>

        <div class="flex justify-end mt-4 mb-12">
          <button phx-click="select-user-type" phx-value-type="" class="flex items-center btn btn-white">
            <svg class="w-5 h-5" stroke="none" fill="currentColor" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" preserveAspectRatio="xMidYMid meet" data-attributes-set=",xmlns:xlink,xmlns,viewBox,preserveAspectRatio,xmlns:xlink,xmlns,viewBox,preserveAspectRatio"><path xmlns="http://www.w3.org/2000/svg" d="M0 0h24v24H0z" fill="none"></path><path xmlns="http://www.w3.org/2000/svg" d="M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z"></path></svg>
            <div class="ml-1">Back</div>
          </button>
          <button type="submit" class="ml-2 btn btn-emerald">Save Property</button>

        </div>
      </form>
    </div>
  </div>

</div>

<script
  src="https://maps.googleapis.com/maps/api/js?key=<%= System.get_env("AUDREY_APP_WEBSITE_GOOGLE_API_KEY", "") %>&callback=initAutocomplete&libraries=places&v=weekly"
  defer
></script>

<script>
  // This sample uses the Autocomplete widget to help the user select a
  // place, then it retrieves the address components associated with that
  // place, and then it populates the form fields with those details.
  // This sample requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script
  // src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
  let placeSearch;
  let autocomplete;
  const componentForm = {
    street_number: "short_name",
    route: "long_name",
    locality: "long_name",
    administrative_area_level_1: "short_name",
    country: "long_name",
    postal_code: "short_name",
  };

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search predictions to
    // geographical location types.
    autocomplete = new google.maps.places.Autocomplete(
      document.getElementById("autocomplete"),
      { types: ["geocode"] }
    );
    // Avoid paying for data that you don't need by restricting the set of
    // place fields that are returned to just the address components.
    autocomplete.setFields(["address_component"]);
    // When the user selects an address from the drop-down, populate the
    // address fields in the form.
    autocomplete.addListener("place_changed", fillInAddress);
  }

  function fillInAddress() {
    // Get the place details from the autocomplete object.
    const place = autocomplete.getPlace();

    for (const component in componentForm) {
      document.getElementById(component).value = "";
      document.getElementById(component).disabled = false;
    }

    // Get each component of the address from the place details,
    // and then fill-in the corresponding field on the form.
    for (const component of place.address_components) {
      const addressType = component.types[0];

      if (componentForm[addressType]) {
        const val = component[componentForm[addressType]];
        document.getElementById(addressType).value = val;
      }
    }
  }

  // Bias the autocomplete object to the user's geographical location,
  // as supplied by the browser's 'navigator.geolocation' object.
  function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition((position) => {
        const geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };
        const circle = new google.maps.Circle({
          center: geolocation,
          radius: position.coords.accuracy,
        });
        autocomplete.setBounds(circle.getBounds());
      });
    }
  }
</script>
