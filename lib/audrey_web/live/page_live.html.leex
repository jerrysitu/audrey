<div class="flex max-h-(screen-16) max-w-full mx-auto">
  <!-- Propery Cards section -->
  <div class="flex flex-col w-full p-4 overflow-y-scroll md:w-144">
    <%= for property <- @properties do %>
      <div phx-click="property-redirect"
           phx-value-property-id="<%= property.id %>"
           class="my-2 text-gray-600 bg-white rounded-lg shadow-md appearance-none cursor-pointer h-max hover:shadow-lg hover:bg-gray-50"
           id="property_<%= property.id %>"
      >
        <%= img_tag(Routes.static_path(@socket, "/images/resized_stock_house.png"), class: "object-cover rounded-t-lg z-10") %>
        <div class="p-4 text-base font-semibold rounded-b-lg">
          <div class="flex flex-wrap">
            <div class="<%= if Map.get(property,:neighborhood, nil) == nil, do: "hidden" %>">
              <div class="whitespace-nowrap"><%= Map.get(property, :neighborhood, "") %>&nbsp;-&nbsp;</div>
            </div>
            <div class=""><%= property.street_number %>&nbsp;</div>
            <div class=""><%= property.route_short %></div>
          </div>
          <div class="flex text-xs text-gray-400 whitespace-nowrap">
            <div class=""><%= property.locality %>, <%= property.administrative_area_level_1_short %></div>
          </div>
          <!-- Propery info section -->
          <div class="inline-flex mt-3 text-sm text-gray-500">
            <div class="flex flex-col mx-auto">
              <div class="mx-auto"><%= property.bedrooms %></div>
              <%= if property.bedrooms == 1 do %>
                <div class="">Bed</div>
              <% else %>
                <div class="">Beds</div>
              <% end %>
            </div>
            <div class="flex flex-col mx-auto ml-3">
              <div class="mx-auto"><%= property.washrooms %></div>
              <%= if property.washrooms == 1 do %>
                <div class="">Bath</div>
              <% else %>
                <div class="">Baths</div>
              <% end %>
            </div>
            <div class="flex flex-col mx-auto ml-3">
              <div class="mx-auto proportional-nums"><%= property.square_footage %></div>
              <div class="">Sq Ft</div>
            </div>
            <div class="flex flex-col mx-auto ml-3 <%= if property.monthly_rent == nil, do: "hidden" %>">
              <div class="mx-auto proportional-nums">$<%= property.monthly_rent %></div>
              <div class="">Monthly</div>
            </div>
          </div>
        </div>
      </div>
    <% end %>
  </div>

  <!-- Map section -->
  <div class="hidden w-full h-full bg-gray-100 md:block">
    <section class="z-10" phx-update="ignore">
      <div id="googleMap" class="relative w-full h-screen-16">
      </div>
    </section>
  </div>

</div>



<script
  src="https://maps.googleapis.com/maps/api/js?key=<%= System.get_env("AUDREY_APP_WEBSITE_GOOGLE_API_KEY", "") %>&callback=initMap&libraries=&v=weekly"
  defer
></script>
<script src="https://unpkg.com/@google/markerclustererplus@4.0.1/dist/markerclustererplus.min.js"></script>

<script>

 (function(exports) {
    "use strict";

    function initMap() {
       const styledMapType = new google.maps.StyledMapType(
        [
          { elementType: "geometry", stylers: [{ color: "#ebe3cd" }] },
          { elementType: "labels.text.fill", stylers: [{ color: "#523735" }] },
          { elementType: "labels.text.stroke", stylers: [{ color: "#f5f1e6" }] },
          {
            featureType: "administrative",
            elementType: "geometry.stroke",
            stylers: [{ color: "#c9b2a6" }],
          },
          {
            featureType: "administrative.land_parcel",
            elementType: "geometry.stroke",
            stylers: [{ color: "#dcd2be" }],
          },
          {
            featureType: "administrative.land_parcel",
            elementType: "labels.text.fill",
            stylers: [{ color: "#ae9e90" }],
          },
          {
            featureType: "landscape.natural",
            elementType: "geometry",
            stylers: [{ color: "#dfd2ae" }],
          },
          {
            featureType: "poi",
            elementType: "geometry",
            stylers: [{ color: "#dfd2ae" }],
          },
          {
            featureType: "poi",
            elementType: "labels.text.fill",
            stylers: [{ color: "#93817c" }],
          },
          {
            featureType: "poi.park",
            elementType: "geometry.fill",
            stylers: [{ color: "#a5b076" }],
          },
          {
            featureType: "poi.park",
            elementType: "labels.text.fill",
            stylers: [{ color: "#447530" }],
          },
          {
            featureType: "road",
            elementType: "geometry",
            stylers: [{ color: "#f5f1e6" }],
          },
          {
            featureType: "road.arterial",
            elementType: "geometry",
            stylers: [{ color: "#fdfcf8" }],
          },
          {
            featureType: "road.highway",
            elementType: "geometry",
            stylers: [{ color: "#f8c967" }],
          },
          {
            featureType: "road.highway",
            elementType: "geometry.stroke",
            stylers: [{ color: "#e9bc62" }],
          },
          {
            featureType: "road.highway.controlled_access",
            elementType: "geometry",
            stylers: [{ color: "#e98d58" }],
          },
          {
            featureType: "road.highway.controlled_access",
            elementType: "geometry.stroke",
            stylers: [{ color: "#db8555" }],
          },
          {
            featureType: "road.local",
            elementType: "labels.text.fill",
            stylers: [{ color: "#806b63" }],
          },
          {
            featureType: "transit.line",
            elementType: "geometry",
            stylers: [{ color: "#dfd2ae" }],
          },
          {
            featureType: "transit.line",
            elementType: "labels.text.fill",
            stylers: [{ color: "#8f7d77" }],
          },
          {
            featureType: "transit.line",
            elementType: "labels.text.stroke",
            stylers: [{ color: "#ebe3cd" }],
          },
          {
            featureType: "transit.station",
            elementType: "geometry",
            stylers: [{ color: "#dfd2ae" }],
          },
          {
            featureType: "water",
            elementType: "geometry.fill",
            stylers: [{ color: "#b9d3c2" }],
          },
          {
            featureType: "water",
            elementType: "labels.text.fill",
            stylers: [{ color: "#92998d" }],
          },
        ],
        { name: "Map" }
      );

      exports.map = new google.maps.Map(document.getElementById("googleMap"), {
        center: {
          lat: 49.271917,
          lng: -123.1007164
        },
        zoom: 12,
        mapTypeControlOptions: {
          mapTypeIds: ["styled_map", "satellite", "hybrid"],
        },
      });

      map.mapTypes.set("styled_map", styledMapType);
      map.setMapTypeId("styled_map");

      const markers = locations.map((location, i) => {
        let marker = new google.maps.Marker({
          position: { lat: location.lat, lng: location.lng },
          icon: 'https://img.icons8.com/plasticine/50/000000/marker.png',
          map
        });

        marker.addListener("click", () => {
          let property_card = document.querySelector(`#property_${location.id}`)

          property_card.classList.add("ring-8", "ring-emerald-400", "bg-gray-100")
          property_card.scrollIntoView( { behavior: 'smooth', block: 'center' } );

          afterFocus(location.id)
        });

        return marker
      });

      new MarkerClusterer(map, markers, {
        imagePath:
          "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",
      });

      }

        exports.initMap = initMap;
      })((this.window = this.window || {}));
</script>

<script>
    const locations = []
    <%= for property <- @properties do %>
      locationMap = { lat: <%= property.latitude %>, lng: <%= property.longitude %>, id: <%= property.id %>};
      locations.push(locationMap)
    <% end %>
</script>

<script>
  afterFocus = (property_id) => {
    let property_card = document.querySelector(`#property_${property_id}`)

    setTimeout(function(){ property_card.classList.remove("ring-8", "ring-emerald-400", "bg-gray-100") }, 2000);
  }
</script>
